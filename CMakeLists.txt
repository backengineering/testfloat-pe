# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr and automatically regenerate CMakeLists.txt
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)

	# Create a configure-time dependency on cmake.toml to improve IDE support
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

project(testfloat-pe)

# Target: testfloat-pe
set(CMKR_TARGET testfloat-pe)
# the linker does the Trolley problem LOL (https://en.wikipedia.org/wiki/Trolley_problem)
# this is bad code...
add_link_options("/FORCE")

set(testfloat-pe_SOURCES
	"source/8086-SSE/extF80M_isSignalingNaN.c"
	"source/8086-SSE/f128M_isSignalingNaN.c"
	"source/8086-SSE/s_commonNaNToExtF80M.c"
	"source/8086-SSE/s_commonNaNToExtF80UI.c"
	"source/8086-SSE/s_commonNaNToF128M.c"
	"source/8086-SSE/s_commonNaNToF128UI.c"
	"source/8086-SSE/s_commonNaNToF16UI.c"
	"source/8086-SSE/s_commonNaNToF32UI.c"
	"source/8086-SSE/s_commonNaNToF64UI.c"
	"source/8086-SSE/s_extF80MToCommonNaN.c"
	"source/8086-SSE/s_extF80UIToCommonNaN.c"
	"source/8086-SSE/s_f128MToCommonNaN.c"
	"source/8086-SSE/s_f128UIToCommonNaN.c"
	"source/8086-SSE/s_f16UIToCommonNaN.c"
	"source/8086-SSE/s_f32UIToCommonNaN.c"
	"source/8086-SSE/s_f64UIToCommonNaN.c"
	"source/8086-SSE/s_propagateNaNExtF80M.c"
	"source/8086-SSE/s_propagateNaNExtF80UI.c"
	"source/8086-SSE/s_propagateNaNF128M.c"
	"source/8086-SSE/s_propagateNaNF128UI.c"
	"source/8086-SSE/s_propagateNaNF16UI.c"
	"source/8086-SSE/s_propagateNaNF32UI.c"
	"source/8086-SSE/s_propagateNaNF64UI.c"
	"source/8086-SSE/softfloat_raiseFlags.c"
	"source/extF80M_add.c"
	"source/extF80M_div.c"
	"source/extF80M_eq.c"
	"source/extF80M_eq_signaling.c"
	"source/extF80M_le.c"
	"source/extF80M_le_quiet.c"
	"source/extF80M_lt.c"
	"source/extF80M_lt_quiet.c"
	"source/extF80M_mul.c"
	"source/extF80M_rem.c"
	"source/extF80M_roundToInt.c"
	"source/extF80M_sqrt.c"
	"source/extF80M_sub.c"
	"source/extF80M_to_f128M.c"
	"source/extF80M_to_f16.c"
	"source/extF80M_to_f32.c"
	"source/extF80M_to_f64.c"
	"source/extF80M_to_i32.c"
	"source/extF80M_to_i32_r_minMag.c"
	"source/extF80M_to_i64.c"
	"source/extF80M_to_i64_r_minMag.c"
	"source/extF80M_to_ui32.c"
	"source/extF80M_to_ui32_r_minMag.c"
	"source/extF80M_to_ui64.c"
	"source/extF80M_to_ui64_r_minMag.c"
	"source/extF80_add.c"
	"source/extF80_div.c"
	"source/extF80_eq.c"
	"source/extF80_eq_signaling.c"
	"source/extF80_isSignalingNaN.c"
	"source/extF80_le.c"
	"source/extF80_le_quiet.c"
	"source/extF80_lt.c"
	"source/extF80_lt_quiet.c"
	"source/extF80_mul.c"
	"source/extF80_rem.c"
	"source/extF80_roundToInt.c"
	"source/extF80_sqrt.c"
	"source/extF80_sub.c"
	"source/extF80_to_f128.c"
	"source/extF80_to_f16.c"
	"source/extF80_to_f32.c"
	"source/extF80_to_f64.c"
	"source/extF80_to_i32.c"
	"source/extF80_to_i32_r_minMag.c"
	"source/extF80_to_i64.c"
	"source/extF80_to_i64_r_minMag.c"
	"source/extF80_to_ui32.c"
	"source/extF80_to_ui32_r_minMag.c"
	"source/extF80_to_ui64.c"
	"source/extF80_to_ui64_r_minMag.c"
	"source/f128M_add.c"
	"source/f128M_div.c"
	"source/f128M_eq.c"
	"source/f128M_eq_signaling.c"
	"source/f128M_le.c"
	"source/f128M_le_quiet.c"
	"source/f128M_lt.c"
	"source/f128M_lt_quiet.c"
	"source/f128M_mul.c"
	"source/f128M_mulAdd.c"
	"source/f128M_rem.c"
	"source/f128M_roundToInt.c"
	"source/f128M_sqrt.c"
	"source/f128M_sub.c"
	"source/f128M_to_extF80M.c"
	"source/f128M_to_f16.c"
	"source/f128M_to_f32.c"
	"source/f128M_to_f64.c"
	"source/f128M_to_i32.c"
	"source/f128M_to_i32_r_minMag.c"
	"source/f128M_to_i64.c"
	"source/f128M_to_i64_r_minMag.c"
	"source/f128M_to_ui32.c"
	"source/f128M_to_ui32_r_minMag.c"
	"source/f128M_to_ui64.c"
	"source/f128M_to_ui64_r_minMag.c"
	"source/f128_add.c"
	"source/f128_div.c"
	"source/f128_eq.c"
	"source/f128_eq_signaling.c"
	"source/f128_isSignalingNaN.c"
	"source/f128_le.c"
	"source/f128_le_quiet.c"
	"source/f128_lt.c"
	"source/f128_lt_quiet.c"
	"source/f128_mul.c"
	"source/f128_mulAdd.c"
	"source/f128_rem.c"
	"source/f128_roundToInt.c"
	"source/f128_sqrt.c"
	"source/f128_sub.c"
	"source/f128_to_extF80.c"
	"source/f128_to_f16.c"
	"source/f128_to_f32.c"
	"source/f128_to_f64.c"
	"source/f128_to_i32.c"
	"source/f128_to_i32_r_minMag.c"
	"source/f128_to_i64.c"
	"source/f128_to_i64_r_minMag.c"
	"source/f128_to_ui32.c"
	"source/f128_to_ui32_r_minMag.c"
	"source/f128_to_ui64.c"
	"source/f128_to_ui64_r_minMag.c"
	"source/f16_add.c"
	"source/f16_div.c"
	"source/f16_eq.c"
	"source/f16_eq_signaling.c"
	"source/f16_isSignalingNaN.c"
	"source/f16_le.c"
	"source/f16_le_quiet.c"
	"source/f16_lt.c"
	"source/f16_lt_quiet.c"
	"source/f16_mul.c"
	"source/f16_mulAdd.c"
	"source/f16_rem.c"
	"source/f16_roundToInt.c"
	"source/f16_sqrt.c"
	"source/f16_sub.c"
	"source/f16_to_extF80.c"
	"source/f16_to_extF80M.c"
	"source/f16_to_f128.c"
	"source/f16_to_f128M.c"
	"source/f16_to_f32.c"
	"source/f16_to_f64.c"
	"source/f16_to_i32.c"
	"source/f16_to_i32_r_minMag.c"
	"source/f16_to_i64.c"
	"source/f16_to_i64_r_minMag.c"
	"source/f16_to_ui32.c"
	"source/f16_to_ui32_r_minMag.c"
	"source/f16_to_ui64.c"
	"source/f16_to_ui64_r_minMag.c"
	"source/f32_add.c"
	"source/f32_div.c"
	"source/f32_eq.c"
	"source/f32_eq_signaling.c"
	"source/f32_isSignalingNaN.c"
	"source/f32_le.c"
	"source/f32_le_quiet.c"
	"source/f32_lt.c"
	"source/f32_lt_quiet.c"
	"source/f32_mul.c"
	"source/f32_mulAdd.c"
	"source/f32_rem.c"
	"source/f32_roundToInt.c"
	"source/f32_sqrt.c"
	"source/f32_sub.c"
	"source/f32_to_extF80.c"
	"source/f32_to_extF80M.c"
	"source/f32_to_f128.c"
	"source/f32_to_f128M.c"
	"source/f32_to_f16.c"
	"source/f32_to_f64.c"
	"source/f32_to_i32.c"
	"source/f32_to_i32_r_minMag.c"
	"source/f32_to_i64.c"
	"source/f32_to_i64_r_minMag.c"
	"source/f32_to_ui32.c"
	"source/f32_to_ui32_r_minMag.c"
	"source/f32_to_ui64.c"
	"source/f32_to_ui64_r_minMag.c"
	"source/f64_add.c"
	"source/f64_div.c"
	"source/f64_eq.c"
	"source/f64_eq_signaling.c"
	"source/f64_isSignalingNaN.c"
	"source/f64_le.c"
	"source/f64_le_quiet.c"
	"source/f64_lt.c"
	"source/f64_lt_quiet.c"
	"source/f64_mul.c"
	"source/f64_mulAdd.c"
	"source/f64_rem.c"
	"source/f64_roundToInt.c"
	"source/f64_sqrt.c"
	"source/f64_sub.c"
	"source/f64_to_extF80.c"
	"source/f64_to_extF80M.c"
	"source/f64_to_f128.c"
	"source/f64_to_f128M.c"
	"source/f64_to_f16.c"
	"source/f64_to_f32.c"
	"source/f64_to_i32.c"
	"source/f64_to_i32_r_minMag.c"
	"source/f64_to_i64.c"
	"source/f64_to_i64_r_minMag.c"
	"source/f64_to_ui32.c"
	"source/f64_to_ui32_r_minMag.c"
	"source/f64_to_ui64.c"
	"source/f64_to_ui64_r_minMag.c"
	"source/fail.c"
	"source/functionInfos.c"
	"source/functions_common.c"
	"source/genCases_bf16.c"
	"source/genCases_common.c"
	"source/genCases_extF80.c"
	"source/genCases_f128.c"
	"source/genCases_f16.c"
	"source/genCases_f32.c"
	"source/genCases_f64.c"
	"source/genCases_i32.c"
	"source/genCases_i64.c"
	"source/genCases_ui32.c"
	"source/genCases_ui64.c"
	"source/genCases_writeTestsTotal.c"
	"source/genLoops.c"
	"source/i32_to_extF80.c"
	"source/i32_to_extF80M.c"
	"source/i32_to_f128.c"
	"source/i32_to_f128M.c"
	"source/i32_to_f16.c"
	"source/i32_to_f32.c"
	"source/i32_to_f64.c"
	"source/i64_to_extF80.c"
	"source/i64_to_extF80M.c"
	"source/i64_to_f128.c"
	"source/i64_to_f128M.c"
	"source/i64_to_f16.c"
	"source/i64_to_f32.c"
	"source/i64_to_f64.c"
	"source/random.c"
	"source/readHex.c"
	"source/s_add128.c"
	"source/s_add256M.c"
	"source/s_addCarryM.c"
	"source/s_addComplCarryM.c"
	"source/s_addExtF80M.c"
	"source/s_addF128M.c"
	"source/s_addM.c"
	"source/s_addMagsExtF80.c"
	"source/s_addMagsF128.c"
	"source/s_addMagsF16.c"
	"source/s_addMagsF32.c"
	"source/s_addMagsF64.c"
	"source/s_approxRecip32_1.c"
	"source/s_approxRecipSqrt32_1.c"
	"source/s_approxRecipSqrt_1Ks.c"
	"source/s_approxRecip_1Ks.c"
	"source/s_compare128M.c"
	"source/s_compare96M.c"
	"source/s_compareNonnormExtF80M.c"
	"source/s_countLeadingZeros16.c"
	"source/s_countLeadingZeros32.c"
	"source/s_countLeadingZeros64.c"
	"source/s_countLeadingZeros8.c"
	"source/s_eq128.c"
	"source/s_invalidExtF80M.c"
	"source/s_invalidF128M.c"
	"source/s_isNaNF128M.c"
	"source/s_le128.c"
	"source/s_lt128.c"
	"source/s_mul128By32.c"
	"source/s_mul128MTo256M.c"
	"source/s_mul128To256M.c"
	"source/s_mul64ByShifted32To128.c"
	"source/s_mul64To128.c"
	"source/s_mul64To128M.c"
	"source/s_mulAddF128.c"
	"source/s_mulAddF128M.c"
	"source/s_mulAddF16.c"
	"source/s_mulAddF32.c"
	"source/s_mulAddF64.c"
	"source/s_negXM.c"
	"source/s_normExtF80SigM.c"
	"source/s_normRoundPackMToExtF80M.c"
	"source/s_normRoundPackMToF128M.c"
	"source/s_normRoundPackToExtF80.c"
	"source/s_normRoundPackToF128.c"
	"source/s_normRoundPackToF16.c"
	"source/s_normRoundPackToF32.c"
	"source/s_normRoundPackToF64.c"
	"source/s_normSubnormalExtF80Sig.c"
	"source/s_normSubnormalF128Sig.c"
	"source/s_normSubnormalF128SigM.c"
	"source/s_normSubnormalF16Sig.c"
	"source/s_normSubnormalF32Sig.c"
	"source/s_normSubnormalF64Sig.c"
	"source/s_remStepMBy32.c"
	"source/s_roundMToI64.c"
	"source/s_roundMToUI64.c"
	"source/s_roundPackMToExtF80M.c"
	"source/s_roundPackMToF128M.c"
	"source/s_roundPackToExtF80.c"
	"source/s_roundPackToF128.c"
	"source/s_roundPackToF16.c"
	"source/s_roundPackToF32.c"
	"source/s_roundPackToF64.c"
	"source/s_roundToI32.c"
	"source/s_roundToI64.c"
	"source/s_roundToUI32.c"
	"source/s_roundToUI64.c"
	"source/s_shiftLeftM.c"
	"source/s_shiftNormSigF128M.c"
	"source/s_shiftRightJam128.c"
	"source/s_shiftRightJam128Extra.c"
	"source/s_shiftRightJam256M.c"
	"source/s_shiftRightJam32.c"
	"source/s_shiftRightJam64.c"
	"source/s_shiftRightJam64Extra.c"
	"source/s_shiftRightJamM.c"
	"source/s_shiftRightM.c"
	"source/s_shortShiftLeft128.c"
	"source/s_shortShiftLeft64To96M.c"
	"source/s_shortShiftLeftM.c"
	"source/s_shortShiftRight128.c"
	"source/s_shortShiftRightExtendM.c"
	"source/s_shortShiftRightJam128.c"
	"source/s_shortShiftRightJam128Extra.c"
	"source/s_shortShiftRightJam64.c"
	"source/s_shortShiftRightJam64Extra.c"
	"source/s_shortShiftRightJamM.c"
	"source/s_shortShiftRightM.c"
	"source/s_sub128.c"
	"source/s_sub1XM.c"
	"source/s_sub256M.c"
	"source/s_subM.c"
	"source/s_subMagsExtF80.c"
	"source/s_subMagsF128.c"
	"source/s_subMagsF16.c"
	"source/s_subMagsF32.c"
	"source/s_subMagsF64.c"
	"source/s_tryPropagateNaNExtF80M.c"
	"source/s_tryPropagateNaNF128M.c"
	"source/slowfloat.c"
	"source/softfloat_state.c"
	"source/standardFunctionInfos.c"
	"source/subj-C/subjfloat.c"
	"source/subjfloat_functions.c"
	"source/testLoops_common.c"
	"source/test_a_bf16_z_f32.c"
	"source/test_a_extF80_z_f128.c"
	"source/test_a_extF80_z_f16.c"
	"source/test_a_extF80_z_f32.c"
	"source/test_a_extF80_z_f64.c"
	"source/test_a_extF80_z_i32_rx.c"
	"source/test_a_extF80_z_i32_x.c"
	"source/test_a_extF80_z_i64_rx.c"
	"source/test_a_extF80_z_i64_x.c"
	"source/test_a_extF80_z_ui32_rx.c"
	"source/test_a_extF80_z_ui32_x.c"
	"source/test_a_extF80_z_ui64_rx.c"
	"source/test_a_extF80_z_ui64_x.c"
	"source/test_a_f128_z_extF80.c"
	"source/test_a_f128_z_f16.c"
	"source/test_a_f128_z_f32.c"
	"source/test_a_f128_z_f64.c"
	"source/test_a_f128_z_i32_rx.c"
	"source/test_a_f128_z_i32_x.c"
	"source/test_a_f128_z_i64_rx.c"
	"source/test_a_f128_z_i64_x.c"
	"source/test_a_f128_z_ui32_rx.c"
	"source/test_a_f128_z_ui32_x.c"
	"source/test_a_f128_z_ui64_rx.c"
	"source/test_a_f128_z_ui64_x.c"
	"source/test_a_f16_z_extF80.c"
	"source/test_a_f16_z_f128.c"
	"source/test_a_f16_z_f32.c"
	"source/test_a_f16_z_f64.c"
	"source/test_a_f16_z_i32_rx.c"
	"source/test_a_f16_z_i32_x.c"
	"source/test_a_f16_z_i64_rx.c"
	"source/test_a_f16_z_i64_x.c"
	"source/test_a_f16_z_ui32_rx.c"
	"source/test_a_f16_z_ui32_x.c"
	"source/test_a_f16_z_ui64_rx.c"
	"source/test_a_f16_z_ui64_x.c"
	"source/test_a_f32_z_bf16.c"
	"source/test_a_f32_z_extF80.c"
	"source/test_a_f32_z_f128.c"
	"source/test_a_f32_z_f16.c"
	"source/test_a_f32_z_f64.c"
	"source/test_a_f32_z_i32_rx.c"
	"source/test_a_f32_z_i32_x.c"
	"source/test_a_f32_z_i64_rx.c"
	"source/test_a_f32_z_i64_x.c"
	"source/test_a_f32_z_ui32_rx.c"
	"source/test_a_f32_z_ui32_x.c"
	"source/test_a_f32_z_ui64_rx.c"
	"source/test_a_f32_z_ui64_x.c"
	"source/test_a_f64_z_extF80.c"
	"source/test_a_f64_z_f128.c"
	"source/test_a_f64_z_f16.c"
	"source/test_a_f64_z_f32.c"
	"source/test_a_f64_z_i32_rx.c"
	"source/test_a_f64_z_i32_x.c"
	"source/test_a_f64_z_i64_rx.c"
	"source/test_a_f64_z_i64_x.c"
	"source/test_a_f64_z_ui32_rx.c"
	"source/test_a_f64_z_ui32_x.c"
	"source/test_a_f64_z_ui64_rx.c"
	"source/test_a_f64_z_ui64_x.c"
	"source/test_a_i32_z_extF80.c"
	"source/test_a_i32_z_f128.c"
	"source/test_a_i32_z_f16.c"
	"source/test_a_i32_z_f32.c"
	"source/test_a_i32_z_f64.c"
	"source/test_a_i64_z_extF80.c"
	"source/test_a_i64_z_f128.c"
	"source/test_a_i64_z_f16.c"
	"source/test_a_i64_z_f32.c"
	"source/test_a_i64_z_f64.c"
	"source/test_a_ui32_z_extF80.c"
	"source/test_a_ui32_z_f128.c"
	"source/test_a_ui32_z_f16.c"
	"source/test_a_ui32_z_f32.c"
	"source/test_a_ui32_z_f64.c"
	"source/test_a_ui64_z_extF80.c"
	"source/test_a_ui64_z_f128.c"
	"source/test_a_ui64_z_f16.c"
	"source/test_a_ui64_z_f32.c"
	"source/test_a_ui64_z_f64.c"
	"source/test_ab_extF80_z_bool.c"
	"source/test_ab_f128_z_bool.c"
	"source/test_ab_f16_z_bool.c"
	"source/test_ab_f32_z_bool.c"
	"source/test_ab_f64_z_bool.c"
	"source/test_abcz_f128.c"
	"source/test_abcz_f16.c"
	"source/test_abcz_f32.c"
	"source/test_abcz_f64.c"
	"source/test_abz_extF80.c"
	"source/test_abz_f128.c"
	"source/test_abz_f16.c"
	"source/test_abz_f32.c"
	"source/test_abz_f64.c"
	"source/test_az_extF80.c"
	"source/test_az_extF80_rx.c"
	"source/test_az_f128.c"
	"source/test_az_f128_rx.c"
	"source/test_az_f16.c"
	"source/test_az_f16_rx.c"
	"source/test_az_f32.c"
	"source/test_az_f32_rx.c"
	"source/test_az_f64.c"
	"source/test_az_f64_rx.c"
	"source/testfloat.c"
	"source/ui32_to_extF80.c"
	"source/ui32_to_extF80M.c"
	"source/ui32_to_f128.c"
	"source/ui32_to_f128M.c"
	"source/ui32_to_f16.c"
	"source/ui32_to_f32.c"
	"source/ui32_to_f64.c"
	"source/ui64_to_extF80.c"
	"source/ui64_to_extF80M.c"
	"source/ui64_to_f128.c"
	"source/ui64_to_f128M.c"
	"source/ui64_to_f16.c"
	"source/ui64_to_f32.c"
	"source/ui64_to_f64.c"
	"source/uint128.c"
	"source/uint128_inline.c"
	"source/verCases_common.c"
	"source/verCases_inline.c"
	"source/verCases_writeFunctionName.c"
	"source/verLoops.c"
	"source/writeCase_a_bf16.c"
	"source/writeCase_a_extF80M.c"
	"source/writeCase_a_f128M.c"
	"source/writeCase_a_f16.c"
	"source/writeCase_a_f32.c"
	"source/writeCase_a_f64.c"
	"source/writeCase_a_ui32.c"
	"source/writeCase_a_ui64.c"
	"source/writeCase_ab_extF80M.c"
	"source/writeCase_ab_f128M.c"
	"source/writeCase_ab_f16.c"
	"source/writeCase_ab_f32.c"
	"source/writeCase_ab_f64.c"
	"source/writeCase_abc_f128M.c"
	"source/writeCase_abc_f16.c"
	"source/writeCase_abc_f32.c"
	"source/writeCase_abc_f64.c"
	"source/writeCase_z_bf16.c"
	"source/writeCase_z_bool.c"
	"source/writeCase_z_extF80M.c"
	"source/writeCase_z_f128M.c"
	"source/writeCase_z_f16.c"
	"source/writeCase_z_f32.c"
	"source/writeCase_z_f64.c"
	"source/writeCase_z_ui32.c"
	"source/writeCase_z_ui64.c"
	"source/writeHex.c"
	"source/8086-SSE/specialize.h"
	"source/fail.h"
	"source/functions.h"
	"source/genCases.h"
	"source/genLoops.h"
	"source/include/internals.h"
	"source/include/opts-GCC.h"
	"source/include/primitiveTypes.h"
	"source/include/primitives.h"
	"source/include/softfloat.h"
	"source/include/softfloat_types.h"
	"source/platform.h"
	"source/random.h"
	"source/readHex.h"
	"source/slowfloat.h"
	"source/softfloat.h"
	"source/softfloat_types.h"
	"source/subj-C/subjfloat_config.h"
	"source/subjfloat.h"
	"source/testLoops.h"
	"source/uint128.h"
	"source/verCases.h"
	"source/verLoops.h"
	"source/writeCase.h"
	"source/writeHex.h"
	cmake.toml
)

add_executable(testfloat-pe)

target_sources(testfloat-pe PRIVATE ${testfloat-pe_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${testfloat-pe_SOURCES})

target_compile_definitions(testfloat-pe PRIVATE
	HAVE_PLATFORM_H
	SOFTFLOAT_FAST_INT64
	EXTFLOAT80
	FLOAT64
	LONG_DOUBLE_IS_EXTFLOAT80
)

target_compile_options(testfloat-pe PRIVATE
	"/W0"
	"/MP"
	"/GL"
)

target_include_directories(testfloat-pe PRIVATE
	source
	"source/include"
	"source/8086-SSE"
)

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT testfloat-pe)
endif()
